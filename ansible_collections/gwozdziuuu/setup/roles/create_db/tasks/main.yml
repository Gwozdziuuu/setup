- name: Assert required vars
  ansible.builtin.assert:
    that:
      - db_name | length > 0
      - db_user | length > 0
      - db_pass | length > 0
      - vault_psql_adm_pass | length > 0
    fail_msg: "Missing one of: db_name, db_user, db_pass, vault_psql_adm_pass"

- name: Wait for Postgres to accept connections
  ansible.builtin.wait_for:
    host: "{{ postgres_host }}"
    port: "{{ postgres_port }}"
    delay: 2
    timeout: 60
    
- name: Ensure role '{{ db_user }}' exists with login
  community.postgresql.postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_pass }}"
    role_attr_flags: LOGIN
    login_host: "{{ postgres_host }}"
    login_port: "{{ postgres_port }}"
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ vault_psql_adm_pass }}"
    state: present
  no_log: true

- name: Ensure database '{{ db_name }}' exists (owned by {{ db_user }})
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    login_host: "{{ postgres_host }}"
    login_port: "{{ postgres_port }}"
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ vault_psql_adm_pass }}"
    state: present
    encoding: "{{ encoding }}"
    lc_collate: "{{ lc_collate }}"
    lc_ctype: "{{ lc_ctype }}"
  register: db_created

- name: Grant ALL on database to '{{ db_user }}' (optional)
  community.postgresql.postgresql_privs:
    login_host: "{{ postgres_host }}"
    login_port: "{{ postgres_port }}"
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ vault_psql_adm_pass }}"
    login_db: "{{ db_name }}"
    type: database
    objs: "{{ db_name }}"
    roles: "{{ db_user }}"
    privs: ALL
    state: present

